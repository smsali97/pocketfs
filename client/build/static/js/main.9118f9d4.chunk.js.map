{"version":3,"sources":["serviceWorker.js","components/FileViewer.jsx","index.js"],"names":["Boolean","window","location","hostname","match","FileViewer","makeStyles","theme","root","margin","spacing","input","display","blue","color","ws","WebSocket","state","snackBarError","snackBarMessage","files","servers","fetchFiles","setState","isFetching","length","fetch","ip","then","response","json","result","forEach","r","Moment","catch","e","shift","console","log","handleDownloadFile","file","saveAs","handleClose","event","reason","handleCreateFolder","key","slice","method","status","headers","get","text","s","handleCreateFiles","prefix","formData","FormData","append","requestOptions","body","handleRenameFolder","oldKey","newKey","newFiles","map","substr","push","replace","modified","handleRenameFile","handleDeleteFolder","handleDeleteFile","fileKey","this","timer","setInterval","onopen","onmessage","evt","message","data","includes","serverIp","JSON","parse","newServers","filter","sort","a","b","latency","onclose","Grid","container","item","xs","direction","alignItems","justify","src","Typography","variant","component","gutterBottom","Snackbar","open","autoHideDuration","onClose","Paper","className","icons","Icons","FontAwesome","onDownloadFile","onCreateFolder","onCreateFiles","onMoveFolder","onMoveFile","onRenameFolder","onDeleteFolder","onDeleteFile","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9118f9d4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport Moment from 'moment'\r\nimport FileBrowser, {Icons, FileRenderers, FolderRenderers, Groupers}  from 'react-keyed-file-browser'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  blue: {\r\n    color: 'lightblue',\r\n  }\r\n}));\r\n\r\n\r\n\r\nclass FileViewer extends React.Component {\r\n  ws = new WebSocket('ws://localhost:8000/ws')\r\n  \r\n  componentDidMount() {\r\n    this.timer = setInterval(() => this.fetchFiles(), 5000);  \r\n  }\r\n\r\n  componentWillMount(){\r\n    this.ws.onopen = () => {\r\n      // on connecting, do nothing but log it to the console\r\n      console.log('connected to proxy :)')\r\n      }\r\n\r\n      this.ws.onmessage = evt => {\r\n      // listen to data sent from the websocket server\r\n      const message = evt.data\r\n          if (message.includes(\"PING\")) {\r\n              var serverIp = JSON.parse(message.replace('PING ',''))\r\n\r\n              let newServers = this.state.servers.filter( e => \r\n                e['ip'] !== serverIp[\"ip\"]\r\n              )\r\n              newServers.push(serverIp)\r\n              newServers.sort((a, b) => {\r\n                return a.latency - b.latency;\r\n              });\r\n              this.setState({...this.state, servers: newServers})\r\n              console.log(this.state.servers)\r\n            }\r\n\r\n      }\r\n\r\n      this.ws.onclose = () => {\r\n        console.log('disconnected from proxy :(')\r\n        this.ws = new WebSocket('ws://localhost:8000/ws')\r\n      }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.timer = null;\r\n  }  \r\n\r\n  \r\n  state = { \r\n    snackBarError: false,\r\n    snackBarMessage: \"\",\r\n    files: [],\r\n    servers: []\r\n  }\r\n\r\n  fetchFiles = () => {\r\n    this.setState({...this.state, isFetching: true})\r\n    if (this.state.servers.length === 0) {\r\n        this.setState({...this.state, snackBarError: true, snackBarMessage: 'Unable to get directory.. no servers online :('})\r\n        return\r\n    } else {\r\n      this.setState({...this.state, snackBarError: false, snackBarMessage: ''})\r\n    }\r\n    \r\n    fetch('http://' + this.state.servers[0].ip + \":8080/directory\")\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        result.forEach( r => {\r\n            r[\"modified\"] = Moment(r[\"modified\"])\r\n        })\r\n        this.setState({...this.state, files: result, isFetching: false})})\r\n      .catch(e => {\r\n        this.state.servers.shift()\r\n        console.log(e)\r\n      });\r\n  }\r\n\r\n  handleDownloadFile = (files) => {\r\n\r\n    files.forEach( file => {\r\n    saveAs('http://' + this.state.servers[0].ip  + ':8080/download?path=' + file,file)\r\n    return\r\n    }\r\n    );\r\n  }\r\n\r\n  handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n      this.setState( state => {\r\n        state.snackBarError = false;\r\n        state.snackBarMessage = \"\";\r\n      } )\r\n  };\r\n\r\n  handleCreateFolder = (key) => {\r\n      const requestOptions = {\r\n        method: 'POST',\r\n    };\r\n\r\n\r\n    fetch('http://' + this.state.servers[0].ip  + ':8080/directory?path=' + key.slice(0, -1), requestOptions)\r\n        .then(response => {\r\n            const status = response.headers.get(\"status\");\r\n          console.log(response)\r\n            if (status !== 200) {\r\n              \r\n              response.text().then(r => {\r\n                    this.setState( s => {\r\n                          s.snackBarError = true;\r\n                          s.snackBarMessage = r;\r\n                    })\r\n              })\r\n            }\r\n        })\r\n  }\r\n  handleCreateFiles = (files, prefix) => {\r\n    console.log(files)\r\n    console.log(prefix)\r\n\r\n    files.forEach( file => {\r\n\r\n\r\n\r\n    const formData = new FormData();\r\n    formData.append('myFile', file)\r\n    if (prefix !== \"\") prefix = prefix.slice(0,-1)\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      body: formData \r\n    };\r\n\r\n    fetch('http://' + this.state.servers[0].ip  + ':8080/upload?path=' + prefix, requestOptions)\r\n    .then(response => {\r\n        const status = response.headers.get(\"status\");\r\n      console.log(response)\r\n        if (status !== 200) {\r\n          response.text().then(r => {\r\n                this.setState( s => {\r\n                      s.snackBarError = true;\r\n                      s.snackBarMessage = r;\r\n                })\r\n          })\r\n        }\r\n    })\r\n\r\n  })\r\n  }\r\n  handleRenameFolder = (oldKey, newKey) => {\r\n    this.setState(state => {\r\n      const newFiles = []\r\n      state.files.map((file) => {\r\n        if (file.key.substr(0, oldKey.length) === oldKey) {\r\n          newFiles.push({\r\n            ...file,\r\n            key: file.key.replace(oldKey, newKey),\r\n            modified: +Moment(),\r\n          })\r\n        } else {\r\n          newFiles.push(file)\r\n        }\r\n      })\r\n      state.files = newFiles\r\n      return state\r\n    })\r\n  }\r\n  handleRenameFile = (oldKey, newKey) => {\r\n    this.setState(state => {\r\n      const newFiles = []\r\n      state.files.map((file) => {\r\n        if (file.key === oldKey) {\r\n          newFiles.push({\r\n            ...file,\r\n            key: newKey,\r\n            modified: +Moment(),\r\n          })\r\n        } else {\r\n          newFiles.push(file)\r\n        }\r\n      })\r\n      state.files = newFiles\r\n      return state\r\n    })\r\n  }\r\n  handleDeleteFolder = (key) => {\r\n    const requestOptions = {\r\n      method: 'DELETE',\r\n  };\r\n  key = key[0].slice(0, -1)\r\n  console.log(key)\r\n\r\n  fetch('http://' + this.state.servers[0].ip  + ':8080/directory?path=' + key, requestOptions)\r\n      .then(response => {\r\n          const status = response.headers.get(\"status\");\r\n        console.log(response)\r\n          if (status !== 200) {\r\n            response.text().then(r => {\r\n                  this.setState( s => {\r\n                        s.snackBarError = true;\r\n                        s.snackBarMessage = r;\r\n                  })\r\n            })\r\n          }\r\n      })  }\r\n  handleDeleteFile = (fileKey) => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n    };\r\n    // TODO: Make this for multiple files\r\n    var prefix = fileKey[0]\r\n    fetch('http://' + this.state.servers[0].ip  + ':8080/remove?path=' + prefix, requestOptions)\r\n    .then(response => {\r\n        const status = response.headers.get(\"status\");\r\n      console.log(response)\r\n        if (status !== 200) {\r\n          response.text().then(r => {\r\n                this.setState( s => {\r\n                      s.snackBarError = true;\r\n                      s.snackBarMessage = r;\r\n                })\r\n          })\r\n        }\r\n    })\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n    // const classes = useStyles();\r\n\r\n    return (\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}    container spacing={0}\r\n  direction=\"column\"\r\n  alignItems=\"center\"\r\n  justify=\"center\">\r\n      <img src=\"lifting-1TB.png\"></img>\r\n      <Typography variant=\"h7\" component=\"h7\" gutterBottom>\r\n       <em>{this.state.servers.length} Pocket Gopher{this.state.servers.length !== 1 ? 's are' : ' is'} available to serve you files!</em>\r\n      </Typography>\r\n      <Typography variant=\"h3\" component=\"h2\" gutterBottom>\r\n        <em>PocketFS -</em> Distributed File System\r\n      </Typography>\r\n      <Snackbar open={this.state.snackBarError} autoHideDuration={6000} onClose={this.handleClose}>\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom>  \r\n        {this.state.snackBarMessage}\r\n        </Typography>\r\n      </Snackbar>\r\n          <Paper className>\r\n      <FileBrowser\r\n        files={this.state.files}\r\n        icons={Icons.FontAwesome(4)}\r\n        onDownloadFile={this.handleDownloadFile}\r\n        onCreateFolder={this.handleCreateFolder}\r\n        onCreateFiles={this.handleCreateFiles}\r\n        onMoveFolder={this.handleRenameFolder}\r\n        onMoveFile={this.handleRenameFile}\r\n        onRenameFolder={this.handleRenameFolder}\r\n        // onRenameFile={this.handleRenameFile}\r\n        onDeleteFolder={this.handleDeleteFolder}\r\n        onDeleteFile={this.handleDeleteFile}\r\n      />\r\n      </Paper>\r\n        </Grid>\r\n        {/* <Grid item xs={6}>\r\n          <Paper className></Paper>\r\n       </Grid> */}\r\n       </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FileViewer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FileViewer from './components/FileViewer';\nimport './static/css/styles.sass';\n\n\nReactDOM.render(<FileViewer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}